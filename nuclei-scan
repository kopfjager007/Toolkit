#!/bin/bash
# Author: Aaron Lesmeister
# Date: 2021-12-18
# File: nuclei-scan
# Purpose: Custom Nuclei run script for the appliance. 
#

VERSION='1.2.1'

########################################
# Output Variables
gDate=$(date +"%Y%m%d-%H%M%S")
F="$(tput setaf 7)[$(tput setaf 9)!$(tput setaf 7)]$(tput sgr0)"
P="$(tput setaf 7)[$(tput setaf 10)+$(tput setaf 7)]$(tput sgr0)"
W="$(tput setaf 7)[$(tput setaf 11)?$(tput setaf 7)]$(tput sgr0)"
I="$(tput setaf 7)[$(tput setaf 12)*$(tput setaf 7)]$(tput sgr0)"

# Regex checks
REGEX_IP="^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$"
REGEX_HOST="(([a-zA-Z]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$"

# Global Nuclei Variables
if [ -f "$HOME/pentest/go/bin/nuclei" ] ; then
    NUCLEI="$HOME/pentest/go/bin/nuclei"
    TMPLPATH="$HOME/pentest/vuln-analysis/nuclei-templates"
else
    printf "%s Nuclei binary not found. Please enter the full path below or \"quit\" to exit\n" "$W"
    read -r NUCLEI
    if [ "$NUCLEI" == "quit" ]; then
        printf "%s Exiting\n\n" "$I"
        exit 1
    else
        if [ -f "$NUCLEI" ]; then
            printf "%s Please enter the path to your Nuclei Templates directory (will be created if it doesn't exist)\n" "$I"
            read -r TEMPLPATH
        else
            printf "%s Nuclei binary not found\n" "$F"
            exit 1
        fi
    fi
fi

ISERVER='' # Update with your self-hosted interactsh-server instance
ITOKEN='' # Update with your interactsh-server auth token.
USER_AGENT='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36 Edg/115.0.1901.183'

# Target Type (v1.2.0); defined in SCAN(). Can be 'single' or 'file'.
T_TYPE=""

########################################

########################################
# Functions
########################################
HELP()
{
    # Show help.
    printf "%sNuclei Scanner%s\n" "$(tput bold)" "$(tput sgr0)"
    printf "    -s    Scan Type\n"
    printf "            Type Options:\n"
    printf "            ALL - Run all protocol templates against a targets file (e.g. int-tgts).\n"
    printf "            NET - Network protocol templates only. Excludes dns, file, http, headless, ssl, and websocket.\n"
    printf "            WEB - Excludes proto:tcp templates and templates tagged \"network\".\n"
    printf "    -m    Manually define Nuclei Templates (i.e. \"-t /path/to/nuclei-templates/cves/2021/CVE-2021-21972.yaml -t /path/to/nuclei-templates/cve/2021-CVE-2021-21985.yaml\")\n"
    printf "    -o    Prepend Log File Name\n"
    printf "    -u    Target URL/Host to scan (only provide one)\n"
    printf "    -l    Target fIle of URLs/Hosts to scan.\n"
    printf "\n"
    printf "    Example:\n"
    printf "        nuclei-scan -s web -o ext -u http://1.2.3.4\n"
    printf "        nuclei-scan -s NET -l int-hosts-smb\n"
    printf "        nuclei-scan -m \"-t /path/to/nuclei-templates/cve/2021-CVE-2021-21985.yaml\" -u 10.10.10.100\n"
    printf "\n"
}
# End HELP Function

SCAN()
{
    # Only choose one scan type (-s); Defined scan (net|web|all) or specific templates (-m)
    if [ -n "$runopt" ] && [ -n "$flags" ]; then
        printf "\n%s Cannot run -l and -m in the same scan.\n" "$F"
        exit 1
    fi

    # Only supply one type of target; single (-u) or list (-l).
    if [ -n "$target" ] && [ -n "$tfile" ]; then
        printf "\n%s Cannot supply -u and -l in the same scan.\n" "$F"
        exit 1
    fi

    # Make sure a target is supplied (-u or -l)
    if [ -z "$target" ] && [ -z "$tfile" ]; then
        printf "\n%s You must specify either a single target (-u) or a target file (-l).\n" "$F"
        exit 1
    else
        if [ -n "$target" ]; then
            T_TYPE="single"
        fi
        
        if [ -n "$tfile" ]; then
            T_TYPE="file"
        fi
    fi

    # Format output file
    if [ -n "$runopt" ]; then
        sType="$runopt"
    else
        sType=""
    fi

    # Create output directory (v1.2.1)
    ODIR="nuclei_rpts"
    if [ ! -d "$ODIR" ]; then
        mkdir "$ODIR"
    fi

    # Scan Template Options
    if [ -n "$runopt" ]; then
        case $runopt in
            ALL|all)
                if [ "$T_TYPE" == "single" ]; then
                    TGT="$target"
                    OF="$(echo "$TGT" | sed -e 's/:\/\//_/g' -e 's/:/_/g').$sType.nuclei" # Files will be "http_12.13.14.15_PORT"
                    printf "%s Running All Protocol Templates against %s\n" "$P" "$TGT"
                    printf "%s Logging to %s\n" "$P" "$ODIR/$OF"
                    $NUCLEI -hang-monitor -H "User-Agent: ${USER_AGENT}" -ud "$TMPLPATH" -iserver "$ISERVER" -itoken "$ITOKEN" -u "$TGT" | tee -a $ODIR/"$OF" 2>&1
                    printf "%s Finsished scanning target %s\n" "$I" "$TGT"
                else
                    printf "%s Looping over targets in target file \"%s\"\n" "$I" "$tfile"
                    for TGT in $(cat "$tfile") ; do
                        OF="$(echo "$TGT" | sed -e 's/:\/\//_/g' -e 's/:/_/g').$sType.nuclei" # Files will be "http_12.13.14.15_PORT"
                        printf "%s Running All Protocol Templates against %s\n" "$P" "$TGT"
                        printf "%s Logging to %s\n" "$P" "$ODIR/$OF"
                        $NUCLEI -hang-monitor -H "User-Agent: ${USER_AGENT}" -ud "$TMPLPATH" -iserver "$ISERVER" -itoken "$ITOKEN" -u "$TGT" | tee -a $ODIR/"$OF" 2>&1
                        sDTS=$(date +%s)
                        while [[ -f pause ]]; do
                            pDTS=$(date +%s)
                            pDUR=$((pDTS - sDTS))
                            printf "%s Scan Paused (Duration %s hr %s min %s sec)\r" "$I" "$((pDUR / 3600))" "$(((pDUR / 60) % 60))" "$((pDUR % 60))"
                            sleep 30
                        done
                        printf "\n\n"
                    done
                    printf "%s Finished processing targets in file \"%s\"\n" "$I" "$tfile"
                fi
                ;;
            NET|net)
                if [ "$T_TYPE" == "single" ]; then
                    TGT="$target"
                    OF="$(echo "$TGT" | sed -e 's/:\/\//_/g' -e 's/:/_/g').$sType.nuclei" # Files will be "http_12.13.14.15_PORT"
                    printf "%s Running Network Checks against %s\n" "$P" "$TGT"
                    printf "%s Logging to %s\n" "$P" "$ODIR/$OF"
                    $NUCLEI -hang-monitor -H "User-Agent: ${USER_AGENT}" -ud "$TMPLPATH" -iserver "$ISERVER" -itoken "$ITOKEN" -pt tcp,dns,whois -u "$TGT" | tee -a $ODIR/"$OF" 2>&1
                    printf "%s Finsished scanning target %s\n" "$I" "$TGT"
                else
                    printf "%s Looping over targets in target file \"%s\"\n" "$I" "$tfile"
                    for TGT in $(cat "$tfile") ; do
                        OF="$(echo "$TGT" | sed -e 's/:\/\//_/g' -e 's/:/_/g').$sType.nuclei" # Files will be "http_12.13.14.15_PORT"
                        printf "%s Running Network Checks against %s\n" "$P" "$TGT"
                        printf "%s Logging to %s\n" "$P" "$ODIR/$OF"
                        $NUCLEI -hang-monitor -H "User-Agent: ${USER_AGENT}" -ud "$TMPLPATH" -iserver "$ISERVER" -itoken "$ITOKEN" -pt tcp,dns,whois -u "$TGT" | tee -a $ODIR/"$OF" 2>&1
                        sDTS=$(date +%s)
                        while [[ -f pause ]]; do
                            pDTS=$(date +%s)
                            pDUR=$((pDTS - sDTS))
                            printf "%s Scan Paused (Duration %s hr %s min %s sec)\r" "$I" "$((pDUR / 3600))" "$(((pDUR / 60) % 60))" "$((pDUR % 60))"
                            sleep 30
                        done
                        printf "\n\n"
                    done
                    printf "%s Finished processing targets in file \"%s\"\n" "$I" "$tfile"
                fi
                ;;
            WEB|web)
                if [ "$T_TYPE" == "single" ]; then
                    TGT="$target"
                    OF="$(echo "$TGT" | sed -e 's/:\/\//_/g' -e 's/:/_/g').$sType.nuclei" # Files will be "http_12.13.14.15_PORT"
                    printf "%s Running Web Checks against %s\n" "$P" "$TGT"
                    printf "%s Logging to %s\n" "$P" "$ODIR/$OF"
                    $NUCLEI -hang-monitor -H "User-Agent: ${USER_AGENT}" -ud "$TMPLPATH" -iserver "$ISERVER" -itoken "$ITOKEN" -ept tcp,ssl -etags network -et "$TMPLPATH"/http/misconfiguration/http-missing-security-headers.yaml,"$TMPLPATH"/http/misconfiguration/xss-deprecated-header.yaml -u "$TGT" | tee -a $ODIR/"$OF" 2>&1
                    printf "%s Finsished scanning target %s\n" "$I" "$TGT"
                else
                    printf "%s Looping over targets in target file \"%s\"\n" "$I" "$tfile"
                    for TGT in $(cat "$tfile") ; do
                        OF="$(echo "$TGT" | sed -e 's/:\/\//_/g' -e 's/:/_/g').$sType.nuclei" # Files will be "http_12.13.14.15_PORT"
                        printf "%s Running Web Checks against %s\n" "$P" "$TGT"
                        printf "%s Logging to %s\n" "$P" "$ODIR/$OF"
                        $NUCLEI -hang-monitor -H "User-Agent: ${USER_AGENT}" -ud "$TMPLPATH" -iserver "$ISERVER" -itoken "$ITOKEN" -ept tcp,ssl -etags network -et "$TMPLPATH"/http/misconfiguration/http-missing-security-headers.yaml,"$TMPLPATH"/http/misconfiguration/xss-deprecated-header.yaml -u "$TGT" | tee -a $ODIR/"$OF" 2>&1
                        sDTS=$(date +%s)
                        while [[ -f pause ]]; do
                            pDTS=$(date +%s)
                            pDUR=$((pDTS - sDTS))
                            printf "%s Scan Paused (Duration %s hr %s min %s sec)\r" "$I" "$((pDUR / 3600))" "$(((pDUR / 60) % 60))" "$((pDUR % 60))"
                            sleep 30
                        done
                        printf "\n\n"
                    done
                    printf "%s Finished processing targets in file \"%s\"\n" "$I" "$tfile"
                fi
                ;;
            *)
                printf "%s Unknown scan template specified.\n" "$F"
                exit 1
                ;;
        esac
    else
        if [ "$T_TYPE" == "single" ]; then
            TGT="$target"
            OF="$(echo "$TGT" | sed -e 's/:\/\//_/g' -e 's/:/_/g').$sType.nuclei" # Files will be "http_12.13.14.15_PORT"
            printf "%s Running Manual Checks against %s\n" "$P" "$TGT"
            printf "%s Templates Selected: \"%s\"\n" "$P" "$flags"
            printf "%s Logging to %s\n" "$P" "$ODIR/$OF"
            $NUCLEI -H "User-Agent: ${USER_AGENT}" -ud "$TMPLPATH" -iserver "$ISERVER" -itoken "$ITOKEN" $flags -u "$TGT" | tee -a $ODIR/"$OF" 2>&1
            printf "%s Finsished scanning target %s\n" "$I" "$TGT"
        else
            printf "%s Looping over targets in target file \"%s\"\n" "$I" "$tfile"
            for TGT in $(cat "$tfile") ; do
                OF="$(echo "$TGT" | sed -e 's/:\/\//_/g' -e 's/:/_/g').$sType.nuclei" # Files will be "http_12.13.14.15_PORT"
                printf "%s Running Manual Checks against %s\n" "$P" "$TGT"
                printf "%s Templates Selected: \"%s\"\n" "$P" "$flags"
                printf "%s Logging to %s\n" "$P" "$ODIR/$OF"
                $NUCLEI -H "User-Agent: ${USER_AGENT}" -ud "$TMPLPATH" -iserver "$ISERVER" -itoken "$ITOKEN" $flags -u "$TGT" | tee -a $ODIR/"$OF" 2>&1
                sDTS=$(date +%s)
                while [[ -f pause ]]; do
                    pDTS=$(date +%s)
                    pDUR=$((pDTS - sDTS))
                    printf "%s Scan Paused (Duration %s hr %s min %s sec)\r" "$I" "$((pDUR / 3600))" "$(((pDUR / 60) % 60))" "$((pDUR % 60))"
                    sleep 30
                done
                printf "\n\n"
            done
            printf "%s Finished processing targets in file \"%s\"\n" "$I" "$tfile"
        fi
    fi
}
# End SCAN function

########################################
# Main
########################################
 if [ $# -eq 0 ]; then
    HELP
    exit 0
fi

while getopts :s:m:o:u:l:h flag
do
    case "${flag}" in
        s) 
            runopt=${OPTARG}
            ;;
        m)
            flags=${OPTARG}
            ;;
        o) 
            outfile=${OPTARG}
            ;;
        u)
            target=${OPTARG}
            ;;
        l)
            tfile=${OPTARG}
            ;;
        h)
            HELP
            exit 0
            ;;
        :)
            printf "\n%s Missing argument for %s\n" "$F" "$OPTARG"
            HELP
            exit 1
            ;;
        *)
            printf "\n%s Unrecognized flag provided: %s\n" "$F" "$OPTARG"
            HELP
            exit 1
            ;;
    esac
done 

SCAN $runopt $flags $outfile $target $tfile
